mode: deployment

image:
  repository: "otel/opentelemetry-collector-contrib"
  tag: "latest"
  pullPolicy: IfNotPresent

clusterRole:
  create: true
  rules:
    - apiGroups: [""]
      resources:
        - nodes
        - nodes/proxy
        - services
        - endpoints
        - pods
      verbs: ["get", "list", "watch"]
    - apiGroups:
        - extensions
      resources:
        - ingresses
      verbs: ["get", "list", "watch"]
    - nonResourceURLs: ["/metrics", "/metrics/cadvisor", "/api/v1/nodes/*/proxy/metrics", "/api/v1/nodes/*/proxy/metrics/cadvisor"]
      verbs: ["get"]

config:
  receivers:
    prometheus:
      api_server:
        enabled: true
        server_config:
          endpoint: "localhost:9090"
      config:
        scrape_configs:
          - job_name: 'avalanche'
            scrape_interval: 15s
            metrics_path: /metrics
            kubernetes_sd_configs:
            - role: pod
              namespaces:
                names:
                - default
            relabel_configs:
            - source_labels: [__meta_kubernetes_pod_label_app]
              action: keep
              regex: avalanche
            - source_labels: [__meta_kubernetes_pod_ip]
              target_label: __address__
              regex: '(.+)'
              replacement: '$1:9001'
            - source_labels: [__meta_kubernetes_pod_name]
              target_label: instance
            - target_label: job
              replacement: avalanche
          - job_name: "prometheus-receiver"
            scrape_interval: 15s
            static_configs:
              - targets: ['localhost:9090']

          - job_name: opentelemetry-collector
            scrape_interval: 15s
            static_configs:
              - targets:
                  - ${env:MY_POD_IP}:8888

  processors:
    batch:
      timeout: 1s
      send_batch_size: 1024
    memory_limiter:
      check_interval: 5s
      limit_percentage: 90
      spike_limit_percentage: 85

  exporters:
    prometheusremotewrite:
      endpoint: "http://prometheus:9090/api/v1/write"
    debug:
      verbosity: basic

  extensions:
    health_check:
      endpoint: 0.0.0.0:13133

  service:
    extensions: [health_check]
    pipelines:
      metrics:
        receivers: [prometheus]
        processors: [memory_limiter, batch]
        exporters: [prometheusremotewrite, debug]

resources:
  limits:
    cpu: "4"
    memory: "8G"
  requests:
    cpu: "2"
    memory: "8G" 